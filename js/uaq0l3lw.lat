var ext = {
    api: function (method, params, callback) {
        var time = new Date().getTime();
        var passed = time - ext.apiLast;
        if(passed < 350)
            _.delay(ext.api, 355 - passed, method, params, callback);
        else {
            ext.apiLast = time;
            params = params || {};
            if(localStorage.token)
                params.access_token = localStorage.token;
            params.v = '5.4';
            $.post('https://api.vk.com/method/'+method, params, function (resp) {
                if(resp.error) {	
                    if(resp.error.error_code == 100 && method == 'messages.getChat')
                        callback(false);
                    else {
                        console.error('vk.api.error.'+resp.error.error_code, resp.error.error_msg);
                        if(resp.error.error_code == 10)
                            _.delay(function () {
                                ext.api(method, params, callback);
                            }, 1000);
                        else if(resp.error.error_code == 5 || resp.error.error_code == 7)
                            ext.auth(function () {
                                ext.api(method, params, callback);
                            });
                        else
                            callback(false);
                    }
                } else {
                   //console.log(method, resp.response);
                    if(callback)
                        callback(resp.response);
                }
            });
        }
    },
    apiLast: 0,
    auth: function (callback) {
        localStorage.removeItem('token');
        if(confirm('Разрешить расширению доступ к аккаунту ВКонтакте?')) {
            chrome.windows.create({
                url:'https://oauth.vk.com/authorize?client_id=3983688&v=5.3&response_type=token&display=popup&scope=messages,friends,photos,audio,video,groups,offline&redirect_uri=http://oauth.vk.com/blank.html',
                type: 'popup'
            }, function(win) {
                var tab = win.tabs[0];
                var listener = function(tabId, changeInfo) {
                    if(tabId == tab.id && changeInfo.status == 'complete')
                        chrome.tabs.get(tabId, function(tab){
                            if(tab.url.indexOf('://oauth.vk.com/blank.html#access') > -1) {
                                var url = tab.url;
                                chrome.tabs.onUpdated.removeListener(listener);
                                chrome.windows.remove(win.id);
                                var data = {};
                                var a = url.substr(url.indexOf('#') + 1).split('&');
                                for (var i in a) {
                                    var b = a[i].split('=');
                                    data[decodeURIComponent(b[0])] = decodeURIComponent(b[1]);
                                }
                                localStorage.token = data.access_token;
                                localStorage.user = data.user_id;
                                $(callback);
                            }
                            if(tab.url.indexOf('://oauth.vk.com/blank.html#error') > -1) {
                                chrome.tabs.onUpdated.removeListener(listener);
                                chrome.windows.remove(win.id);
                            }
                        });
                };
                chrome.tabs.onUpdated.addListener(listener);
            });
        }
    },
    check: _.throttle(function () {
        if(localStorage.token)
            ext.api('account.getCounters', {}, function (resp) {
                localStorage.counters = _.isArray(resp) ? '{}' : JSON.stringify(resp);
                chrome.browserAction.setBadgeText({
                    text: String(resp.messages || '')
                });
            });
    }, 500),
    sound: function () {
        new Audio('bb2.mp3').play();
    },
    open: function () {
        if(localStorage.token)
            chrome.tabs.query({
                url: chrome.runtime.getURL('page.html')
            }, function (result) {
                if(result.length > 0)
                    chrome.tabs.update(result[0].id, {
                        active: true
                    });
                else
                    chrome.tabs.create({
                        url: 'page.html'
                    });
            });
        else
            ext.auth(ext.open);
    },
    emoji: {
        codes: ['D83DDE0A','D83DDE03','D83DDE09','D83DDE06','D83DDE1C','D83DDE0B','D83DDE0D','D83DDE0E','D83DDE12','D83DDE0F','D83DDE14','D83DDE22','D83DDE2D','D83DDE29','D83DDE28','D83DDE10','D83DDE0C','D83DDE04','D83DDE07','D83DDE30','D83DDE32','D83DDE33','D83DDE37','D83DDE02','2764','D83DDE1A','D83DDE15','D83DDE2F','D83DDE26','D83DDE35','D83DDE20','D83DDE21','D83DDE1D','D83DDE34','D83DDE18','D83DDE1F','D83DDE2C','D83DDE36','D83DDE2A','D83DDE2B','263A','D83DDE00','D83DDE25','D83DDE1B','D83DDE16','D83DDE24','D83DDE23','D83DDE27','D83DDE11','D83DDE05','D83DDE2E','D83DDE1E','D83DDE19','D83DDE13','D83DDE01','D83DDE31','D83DDE38','D83DDE17','D83DDE39','D83DDE3C','D83DDE3B','D83DDE3A','D83DDE3E','D83DDE3F','D83DDE3D','D83DDE40','D83DDE08','D83DDC7F','D83DDC7D','D83DDC4D','D83DDC4E','261D','270C','D83DDC4C','D83DDC4F','D83DDC4A','270B','D83DDE4F','D83DDC43','D83DDC46','D83DDC47','D83DDC48','D83DDCAA','D83DDC42','D83DDC8B','D83DDCA9','2744','D83CDF4A','D83CDF77','D83CDF78','D83CDF85','D83DDCA6','D83DDC7A','D83DDC28','D83DDD1E','D83DDC79','26BD','26C5','D83CDF1F','D83CDF4C','D83CDF7A','D83CDF7B','D83CDF39','D83CDF45','D83CDF52','D83CDF81','D83CDF82','D83CDF84','D83CDFC1','D83CDFC6','D83DDC0E','D83DDC0F','D83DDC1C','D83DDC2B','D83DDC2E','D83DDC03','D83DDC3B','D83DDC3C','D83DDC05','D83DDC13','D83DDC18','D83DDC94','D83DDCAD','D83DDC36','D83DDC31','D83DDC37','D83DDC11','23F3','26BE','26C4','2600','D83CDF3A','D83CDF3B','D83CDF3C','D83CDF3D','D83CDF4B','D83CDF4D','D83CDF4E','D83CDF4F','D83CDF6D','D83CDF37','D83CDF38','D83CDF46','D83CDF49','D83CDF50','D83CDF51','D83CDF53','D83CDF54','D83CDF55','D83CDF56','D83CDF57','D83CDF69','D83CDF83','D83CDFAA','D83CDFB1','D83CDFB2','D83CDFB7','D83CDFB8','D83CDFBE','D83CDFC0','D83CDFE6','D83CDF00','D83CDF04','D83CDF01','D83CDF03','D83CDF02','D83CDF05','D83CDF06','D83CDF08','D83CDF07','D83CDF09','D83CDF0A','D83CDF0B','D83CDF0C','D83CDF0E','D83CDF0D','D83CDF0F','D83CDF11','D83CDF10','D83CDF12','D83CDF13','D83CDF14','D83CDF15','D83CDF16','D83CDF17','D83CDF18','D83CDF19','D83CDF1A','D83CDF1B','D83CDF1C','D83CDF1D','D83CDF1E','D83CDF20','D83CDF30','D83CDF31','D83CDF32','D83CDF33','D83CDF34','D83CDF35','D83CDF3E','D83CDF3F','D83CDF40','D83CDF41','D83CDF42','D83CDF44','D83CDF43','D83CDF47','D83CDF48','D83CDF58','D83CDF59','D83CDF5B','D83CDF5A','D83CDF5E','D83CDF5C','D83CDF5D','D83CDF5F','D83CDF60','D83CDF63','D83CDF61','D83CDF66','D83CDF65','D83CDF62','D83CDF64','D83CDF67','D83CDF6A','D83CDF68','D83CDF6B','D83CDF6C','D83CDF6E','D83CDF6F','D83CDF70','D83CDF71','D83CDF72','D83CDF73','D83CDF74','D83CDF76','D83CDF75','D83CDF79','D83CDF7C','D83CDF80','D83CDF87','D83CDF86','D83CDF88','D83CDF89','D83CDF8A','D83CDF8C','D83CDF8B','D83CDF8D','D83CDF8F','D83CDF8E','D83CDF90','D83CDF91','D83CDF92','D83CDF93','D83CDFA2','D83CDFA1','D83CDFA0','D83CDFA3','D83CDFA5','D83CDFA4','D83CDFA6','D83CDFA8','D83CDFA7','D83CDFA9','D83CDFAB','D83CDFAD','D83CDFAC','D83CDFB0','D83CDFAE','D83CDFAF','D83CDFB4','D83CDFB3','D83CDFB5','D83CDFB6','D83CDFB9','D83CDFBA','D83CDFBB','D83CDFBC','D83CDFBD','D83CDFBF','D83CDFC2','D83CDFC3','D83CDFC4','D83CDFC7','D83CDFC8','D83CDFC9','D83CDFCA','D83CDFE0','D83CDFE1','D83CDFE3','D83CDFE2','D83CDFE4','D83CDFE5','D83CDFE7','D83CDFE8','D83CDFE9','D83CDFEA','D83CDFEB','D83CDFED','D83CDFEE','D83CDFEC','D83CDFF0','D83CDFEF','D83DDC00','D83DDC01','D83DDC02','D83DDC04','D83DDC06','D83DDC07','D83DDC09','D83DDC08','D83DDC0A','D83DDC0D','D83DDC0C','D83DDC0B','D83DDC10','D83DDC14','D83DDC12','D83DDC15','D83DDC17','D83DDC16','D83DDC19','D83DDC1A','D83DDC1B','D83DDC1D','D83DDC1E','D83DDC1F','D83DDC20','D83DDC21','D83DDC22','D83DDC24','D83DDC25','D83DDC26','D83DDC27','D83DDC29','D83DDC23','D83DDC2A','D83DDC2C','D83DDC2D','D83DDC2F','D83DDC32','D83DDC30','D83DDC33','D83DDC35','D83DDC34','D83DDC38','D83DDC39','D83DDC3A','D83DDC3D','D83DDC3E','D83DDC40','D83DDC44','D83DDC45','D83DDC49','D83DDC4B','D83DDC50','D83DDC51','D83DDC53','D83DDC54','D83DDC52','D83DDC56','D83DDC55','D83DDC57','D83DDC58','D83DDC59','D83DDC5A','D83DDC5B','D83DDC5C','D83DDC5D','D83DDC5F','D83DDC5E','D83DDC60','D83DDC61','D83DDC62','D83DDC63','D83DDC64','D83DDC65','D83DDC67','D83DDC66','D83DDC68','D83DDC69','D83DDC6B','D83DDC6A','D83DDC6C','D83DDC6D','D83DDC6E','D83DDC6F','D83DDC71','D83DDC70','D83DDC72','D83DDC73','D83DDC74','D83DDC75','D83DDC78','D83DDC77','D83DDC76','D83DDC7B','D83DDC7C','D83DDC7E','D83DDC81','D83DDC80','D83DDC82','D83DDC83','D83DDC84','D83DDC86','D83DDC85','D83DDC87','D83DDC88','D83DDC8A','D83DDC89','D83DDC8D','D83DDC8C','D83DDC8F','D83DDC90','D83DDC8E','D83DDC91','D83DDC92','D83DDC93','D83DDC95','D83DDC96','D83DDC97','D83DDC98','D83DDC99','D83DDC9A','D83DDC9B','D83DDC9C','D83DDC9D','D83DDC9E','D83DDCA0','D83DDC9F','D83DDCA1','D83DDCA2','D83DDCA3','D83DDCA4','D83DDCA5','D83DDCA7','D83DDCA8','D83DDCAB','D83DDCAC','D83DDCAE','D83DDCAF','D83DDCB1','D83DDCB0','D83DDCB2','D83DDCB3','D83DDCB4','D83DDCB6','D83DDCB8','D83DDCB5','D83DDCB9','D83DDCB7','D83DDCBA','D83DDCBE','D83DDCBD','D83DDCBB','D83DDCBC','D83DDCC0','D83DDCBF','D83DDCC1','D83DDCC3','D83DDCC4','D83DDCC6','D83DDCC2','D83DDCC5','D83DDCC8','D83DDCC7','D83DDCCB','D83DDCCD','D83DDCC9','D83DDCCA','D83DDCCC','D83DDCCE','D83DDCCF','D83DDCD0','D83DDCD2','D83DDCD1','D83DDCD5','D83DDCD4','D83DDCD3','D83DDCD6','D83DDCD7','D83DDCD9','D83DDCDA','D83DDCDB','D83DDCDD','D83DDCD8','D83DDCDE','D83DDCDC','D83DDCE0','D83DDCDF','D83DDCE1','D83DDCE2','D83DDCE4','D83DDCE3','D83DDCE6','D83DDCE8','D83DDCE7','D83DDCE5','D83DDCE9','D83DDCEA','D83DDCEC','D83DDCED','D83DDCEB','D83DDCEE','D83DDCEF','D83DDCF0','D83DDCF2','D83DDCF4','D83DDCF1','D83DDCF5','D83DDCF7','D83DDCF6','D83DDCF9','D83DDCFC','D83DDCFA','D83DDCFB','D83DDD02','D83DDD01','D83DDD00','D83DDD04','D83DDD03','D83DDD05','D83DDD07','D83DDD08','D83DDD06','D83DDD0A','D83DDD0B','D83DDD09','D83DDCF3','D83DDD0C','D83DDD0D','D83DDD0E','D83DDD12','D83DDD0F','D83DDD10','D83DDD11','D83DDD15','D83DDD13','D83DDD16','D83DDD14','D83DDD17','D83DDD18','D83DDD1B','D83DDD19','D83DDD1A','D83DDD1C','D83DDD1D','D83DDD1F','D83DDD21','D83DDD22','D83DDD25','D83DDD20','D83DDD23','D83DDD24','D83DDD27','D83DDD28','D83DDD26','D83DDD2A','D83DDD29','D83DDD2B','D83DDD2D','D83DDD2E','D83DDD2C','D83DDD2F','D83DDD30','D83DDD31','D83DDD33','D83DDD35','D83DDD34','D83DDD32','D83DDD36','D83DDD38','D83DDD3A','D83DDD39','D83DDD37','D83DDD3B','D83DDD3C','D83DDD3D','D83DDDFB','D83DDDFD','D83DDDFE','D83DDDFF','D83DDDFC','D83DDE45','D83DDE48','D83DDE4A','D83DDE46','D83DDE47','D83DDE49','D83DDE4B','D83DDE4E','D83DDE4D','D83DDE4C','D83DDE81','D83DDE80','D83DDE82','D83DDE84','D83DDE83','D83DDE85','D83DDE87','D83DDE86','D83DDE88','D83DDE89','D83DDE8A','D83DDE8B','D83DDE8C','D83DDE8E','D83DDE8D','D83DDE8F','D83DDE90','D83DDE92','D83DDE91','D83DDE93','D83DDE94','D83DDE96','D83DDE97','D83DDE95','D83DDE9A','D83DDE98','D83DDE99','D83DDE9D','D83DDE9C','D83DDE9B','D83DDE9E','D83DDEA0','D83DDE9F','D83DDEA2','D83DDEA3','D83DDEA1','D83DDEA4','D83DDEA5','D83DDEA6','D83DDEA7','D83DDEA8','D83DDEA9','D83DDEAA','D83DDEAC','D83DDEAD','D83DDEAB','D83DDEAF','D83DDEAE','D83DDEB0','D83DDEB1','D83DDEB4','D83DDEB5','D83DDEB2','D83DDEB6','D83DDEB7','D83DDEB3','D83DDEBA','D83DDEB9','D83DDEBB','D83DDEBC','D83DDEB8','D83DDEBD','D83DDEBE','D83DDEBF','D83DDEC2','D83DDEC0','D83DDEC1','D83DDEC5','D83DDEC4','D83DDEC3','D83CDDE8D83CDDF3','D83CDDE9D83CDDEA','D83CDDEAD83CDDF8','D83CDDEBD83CDDF7','D83CDDECD83CDDE7','D83CDDEED83CDDF9','D83CDDEFD83CDDF5','D83CDDF0D83CDDF7','D83CDDF7D83CDDFA','D83CDDFAD83CDDF8','003020E3','003120E3','003220E3','003320E3','003420E3','003520E3','003620E3','003720E3','003820E3','003920E3','2122','203C','2049','2139','2194','2195','2196','2197','2198','2199','21A9','21AA','231B','231A','23E9','23EA','23EB','23EC','23F0','24C2','25AA','25AB','25B6','25C0','25FB','25FC','25FD','25FE','2601','2611','2615','2614','260E','2648','2649','264A','264B','264C','264D','264F','264E','2650','2651','2652','2653','2660','2665','2663','2666','2668','267B','267F','2693','26A0','26A1','26AB','26AA','26CE','26D4','26EA','26F3','26F2','26F5','26FA','26FD','2702','2705','270A','2709','2708','270F','2712','2714','2716','2728','2733','2734','2747','274C','274E','2753','2754','2755','2757','2795','2797','2796','27A1','27B0','27BF','2934','2935','2B05','2B07','2B06','2B1B','2B1C','2B50','2B55','3030','303D','D83CDC04','D83CDCCF','D83CDD70','D83CDD71','D83CDD7E','D83CDD7F','D83CDD8E','D83CDD91','D83CDD93','D83CDD95','D83CDD94','D83CDD92','D83CDD96','D83CDD97','D83CDD98','D83CDD9A','D83CDD99','D83CDE01'],
        symbols: [],
        smiles: '',
        code: function (symbol) {
            return ext.emoji.codes[_.indexOf(ext.emoji.symbols, symbol)];
        },
        symbol: function (code) {
            var sym = '';
            for (var i = 0; i < code.length / 4; i++)
                sym += String.fromCharCode(parseInt(code.substr(i*4, 4), 16));
            return sym;
        }
    },
    apply: _.throttle(function () {
        ext.scope.counters = JSON.parse(localStorage.counters);
        ext.scope.dialogs = _.sortBy(_.compact(_.union(_.map(ext.scope.users, function (user, id) {
            return _.last(ext.messages.user(id));
        }), _.map(ext.scope.chats, function (chat, id) {
            return _.last(ext.messages.chat(id));
        }))), function (dialog) {
            return dialog.date;
        });
        ext.scope.dialogs.reverse();
        ext.scope.unreads = { total: 0 };
        ext.scope.dialog = [];
        _.each(ext.scope.messages, function (message) {
            if (!message.read && !message.out) {
                var id = message.user || 'c' + message.chat;
                ext.scope.unreads[id] = (ext.scope.unreads[id] || 0) + 1;
                ext.scope.unreads.total++;
            }
        });
        ext.scope.chat = ext.scope.sel && ext.scope.sel.substr(0, 1) == 'c' ? ext.scope.sel.substr(1) : false;
        ext.scope.user = ext.scope.sel && !ext.scope.chat ? ext.scope.sel : false;
        ext.scope.$apply();
        var hash = '#/' + (ext.scope.sel ? str_replace(ext.scope.sel, ext.scope.sel + '!', ext.scope.peers.join('_')) : ext.scope.peers.join('_'));
        if (location.hash != hash)
            location.hash = hash;
    }, 100),
    hash: function () {
        var hash = location.hash.substr(2);
        var peers = [];
        var sel = false;
        if (hash)
            _.each(hash.split('_'), function (peer) {
                var id = str_replace('!', '', peer);
                peers.push(id);
                if (peer != id)
                    sel = id;
            });
        return [sel, peers];
    },
    longPoll: function (key, server, ts) {
        ext.longPollLast = getTime();
        if (key && server && ts)
            $.getJSON('https://' + server, {
                act: 'a_check',
                key: key,
                ts: ts,
                wait: 25,
                mode: 64
            }, function (resp) {
                if (resp.failed)
                    ext.longPoll();
                else {
                    _.each(resp.updates, ext.update);
                    ext.longPoll(key, server, resp.ts);
                }
            });
        else
            ext.api('messages.getLongPollServer', {
                use_ssl: 1,
                need_pts: 0
            }, function (resp) {
                ext.longPoll(resp.key, resp.server, resp.ts);
            });
    },
    longPollLast: 0,
    update: function (upd) {
        //console.log('update', upd);
        if (upd[0] == 3 && upd[2] == 1) { // Сообщение прочитано
            chrome.runtime.sendMessage({ check: true });
            ext.scope.messages[upd[1]].read = true;
            ext.apply();
        }
        if (upd[0] == 4) { // Новое сообщение
            if (upd[2] & 8192 || upd[2] & 512) // Из беседы или с прикреплениями
                ext.messages.load(upd[1]);
            else {
                var message = {
                    id: upd[1],
                    text: ext.messages.handle(upd[6]),
                    date: upd[4],
                    read: false,
                    out: Boolean(upd[2] & 2),
                    atts:[],
                    att: false,
                    fwd: [],
                    from: upd[2] & 2 ? ext.scope.account : upd[3],
                    user: upd[3]
                }
                ext.users.load(upd[3]);
                ext.scope.messages[message.id] = _.extend(ext.scope.messages[message.id] || {}, message);
                ext.apply();
            }
            chrome.runtime.sendMessage({ check: true });
            ext.sound();
        }
        if (upd[0] == 8 || upd[0] == 9) { // Друг стал онлайн или оффлайн
            ext.users.load(0 - upd[1], true);
        }
        if (upd[0] == 51) { // Изменение параметров беседы
            ext.chats.load(upd[1], true);
        }
    },
    actions: {
        open: function (id) {
            if (id)
                ext.scope.peers = _.union(ext.scope.peers, [id]);
            ext.scope.sel = id || false;
            ext.apply();
        },
        close: function (id) {
            ext.scope.peers = _.without(ext.scope.peers, id);
            if (ext.scope.sel == id)
                ext.scope.sel = false;
            ext.apply();
        },
        read: function (id, message) {

        },
        logout: function () {
            localStorage.clear();
            chrome.runtime.reload();
        },
        widget: function () {
            VK.Widgets.Group('vk_groups', {
                mode: 2,
                wide: 1,
                width: 'auto',
                height: window.innerHeight - 100,
                color1: 'FFFFFF',
                color2: '0059b3',
                color3: '222'
            }, 61282449);
        }
    }
}
function getTime() {
	return new Date().getTime();
}
function log () {
	console.log(arguments);
}
function str_replace(e, d, a, f) { var b = 0, c = 0, g = "", h = "", k = 0, l = 0; e = [].concat(e); d = [].concat(d); var m = "[object Array]" === Object.prototype.toString.call(d), n = "[object Array]" === Object.prototype.toString.call(a); a = [].concat(a); f && (this.window[f] = 0); b = 0; for (k = a.length; b < k; b++) if ("" !== a[b]) for (c = 0, l = e.length; c < l; c++) g = a[b] + "", h = m ? void 0 !== d[c] ? d[c] : "" : d[0], a[b] = g.split(e[c]).join(h), f && a[b] !== g && (this.window[f] += (g.length - a[b].length) / e[c].length); return n ? a : a[0] };
function trim(a,e){var c,d=0,b=0;a+="";c=e?(e+"").replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g,"$1"):" \n\r\t\f\x0B\u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000";d=a.length;for(b=0;b<d;b++)if(-1===c.indexOf(a.charAt(b))){a=a.substring(b);break}d=a.length;for(b=d-1;0<=b;b--)if(-1===c.indexOf(a.charAt(b))){a=a.substring(0,b+1);break}return-1===c.indexOf(a.charAt(0))?a:""};